{"ast":null,"code":"/**\n * @freesewing/utils | v2.19.5\n * A collection of utilities shared across freesewing projects\n * (c) 2021 Joost De Cock <joost@joost.at> (https://github.com/joostdecock)\n * @license MIT\n */\n'use strict';\n\nvar smallestImperialStep = 0.396875;\n\nvar roundMmUp = function roundMmUp(val, units) {\n  if (units === \"imperial\") return val - val % smallestImperialStep;else return Math.ceil(val * 10) / 10;\n};\n\nmodule.exports = roundMmUp;","map":{"version":3,"sources":["../src/smallestImperialStep/index.js","../src/roundMmUp/index.js"],"names":["smallestImperialStep","roundMmUp","units","val","Math"],"mappings":";;;;;;;;AAAA,IAAMA,oBAAoB,GAA1B,QAAA;;ICEMC,SAAS,GAAG,SAAZA,SAAY,CAAA,GAAA,EAAA,KAAA,EAAgB;AAChC,MAAIC,KAAK,KAAT,UAAA,EAA0B,OAAOC,GAAG,GAAIA,GAAG,GAA3C,oBAA0B,CAA1B,KACK,OAAOC,IAAI,CAAJA,IAAAA,CAAUD,GAAG,GAAbC,EAAAA,IAAP,EAAA;AACN,C","sourcesContent":["const smallestImperialStep = 0.396875;\n\nexport default smallestImperialStep;\n","import smallestImperialStep from \"../smallestImperialStep\";\n\nconst roundMmUp = (val, units) => {\n  if (units === \"imperial\") return val - (val % smallestImperialStep);\n  else return Math.ceil(val * 10) / 10;\n};\n\nexport default roundMmUp;\n"]},"metadata":{},"sourceType":"script"}